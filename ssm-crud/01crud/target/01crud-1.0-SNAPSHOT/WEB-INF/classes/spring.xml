<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

  <!--spring配置文件 主要配置和业务相关的 核心：【数据源，mybatis整合，事务控制【***非常重要性】】-->

  <!--    组件扫描-->
  <context:component-scan base-package="com.dai">
    <!--不扫描控制器-->
    <context:exclude-filter type="annotation"
      expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>


  <!--引入外部文件-->
  <context:property-placeholder location="classpath:db.properties"/>
  <!-- 配置数据源-->
  <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
    <property name="url" value="${jdbc.url}"/>
    <property name="driverClassName" value="${jdbc.driverClass}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
  </bean>
  <!--配置mybatis的整合-->

  <!--能帮我们创建sqlSessionFactory-->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!--指定mybatis的全局配置文件的位置-->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    <!--引用数据源-->
    <property name="dataSource" ref="druidDataSource"/>
    <!--指定mapper文件位置-->
    <property name="mapperLocations" value="classpath:mapper/*.xml"/>
  </bean>
  <!--配置扫描器：将mybatis接口的实现加入到ioc容器-->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!--扫描dao 包下的所有接口-->
    <property name="basePackage" value="com.dai.mapper"/>
  </bean>

  <!-- 配置一个可以执行批量的sqlSession -->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    <constructor-arg name="executorType" value="BATCH"/>
  </bean>


  <!--事务管理器事务控制-->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!-- 控制数据源：开启关闭，回滚提交等-->
    <property name="dataSource" ref="druidDataSource"/>
  </bean>
  <!--开启事务控制-->
  <aop:config>
    <!--切入点表达式；切入哪些方法
    第一个*：所有返回值类型 第一个..service下有子包也可以
    第二个*：包下的所有类   第二个..方法的参数任意个数-->
    <aop:pointcut id="txPoint" expression="execution(* com.dai.service..*(..))"/>

    <!--配置事务增强 -->
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
  </aop:config>

  <!--配置事务增强： 指定事务切入后怎么作-->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <!--* 表示切入的所有的方法都是事务方法-->
      <tx:method name="*"/>
      <!--get* 表示切入的所有的get方法都是事务方法,我们认为所有get方法都是只读，我们可以使用read-only="true"进行调优-->
      <tx:method name="get*" read-only="true"/>
    </tx:attributes>
  </tx:advice>
</beans>